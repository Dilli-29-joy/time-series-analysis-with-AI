# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14YRQUqkgTibcKWbdzmMiCqpjb2beW5G4
"""

import pandas as pd
from prophet import Prophet
import yfinance as yf
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error
import numpy as np

# Step 1: Collect Data
def collect_data(ticker='AAPL', start='2015-01-01', end='2024-12-31'):
    df = yf.download(ticker, start=start, end=end)
    df = df.reset_index()[['Date', 'Close']]
    df.columns = ['ds', 'y']  # Prophet expects columns to be named 'ds' and 'y'
    return df

# Step 2: Train/Test Split
def train_test_split(df, test_size=0.2):
    split_idx = int(len(df) * (1 - test_size))
    return df[:split_idx], df[split_idx:]

# Step 3: Model Training
def train_prophet(train_df):
    model = Prophet(daily_seasonality=True)
    model.fit(train_df)
    return model

# Step 4: Forecasting
def make_forecast(model, periods):
    future = model.make_future_dataframe(periods=periods)
    forecast = model.predict(future)
    return forecast

# Step 5: Evaluation
def evaluate(actual, predicted):
    rmse = np.sqrt(mean_squared_error(actual, predicted))
    print(f"RMSE: {rmse}")

# Step 6: Visualization
def plot_forecast(df, forecast):
    model_plot = forecast[['ds', 'yhat']].set_index('ds')
    actual = df.set_index('ds')
    plt.figure(figsize=(10, 5))
    plt.plot(actual['y'], label='Actual')
    plt.plot(model_plot['yhat'], label='Predicted')
    plt.legend()
    plt.title('Stock Price Forecast using Prophet')
    plt